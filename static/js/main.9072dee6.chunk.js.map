{"version":3,"sources":["components/Stopwatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","useState","timer","setTimer","isActive","setIsActive","isWait","setIsWait","isReset","setIsReset","increment","useRef","handleStop","clearInterval","current","handleResume","setInterval","className","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","formatTime","onClick","onDoubleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAwFeA,EAtFG,WAAO,IAAD,EACIC,mBAAS,GADb,mBACfC,EADe,KACRC,EADQ,OAEUF,oBAAS,GAFnB,mBAEfG,EAFe,KAELC,EAFK,OAGMJ,oBAAS,GAHf,mBAGfK,EAHe,KAGPC,EAHO,OAIQN,oBAAS,GAJjB,mBAIfO,EAJe,KAINC,EAJM,KAKhBC,EAAYC,iBAAO,MAkBnBC,EAAa,WACjBC,cAAcH,EAAUI,SACxBP,GAAU,GACVJ,EAAS,IAGLY,EAAe,WACnBR,GAAU,GACVE,GAAW,GACXC,EAAUI,QAAUE,aAAY,WAC9Bb,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MAuBL,OACE,sBAAKe,UAAU,uCAAf,UACE,2CACA,sBAAKA,UAAU,iBAAf,UACE,4BAba,WACjB,IAAMC,EAAa,WAAKhB,EAAQ,IAAMiB,OAAO,GACvCC,EAAO,UAAMC,KAAKC,MAAMpB,EAAQ,KAChCqB,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAMpB,EAAQ,OAAQiB,OAAO,GAEvD,MAAM,GAAN,OAAUK,EAAV,cAAwBD,EAAxB,cAAwCL,GAOhCO,KACJ,sBAAKR,UAAU,UAAf,UAEKb,GAAaE,GAGRA,EAAS,wBAAQW,UAAU,iBACVS,QAASd,EADjB,kBAET,wBAAQK,UAAU,kBACVS,QAASX,EADjB,sBAEIP,IAAYF,EAAS,wBAAQW,UAAU,kBACVS,QAASX,EADjB,mBAErB,wBAAQE,UAAU,iBACVS,QAASd,EADjB,mBARR,wBAAQK,UAAU,kBACVS,QA3DA,WAClBrB,GAAY,GACZE,GAAU,GACVE,GAAW,GACXN,EAAS,GACTO,EAAUI,QAAUE,aAAY,WAC9Bb,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MAmDO,mBAWJ,wBAAQe,UAAU,uBACVU,cA5DG,WACjBd,cAAcH,EAAUI,SACxBP,GAAU,GACVE,GAAW,IAwDL,kBAEA,wBAAQQ,UAAU,uBACVS,QA1CI,WAClBb,cAAcH,EAAUI,SACxBL,GAAW,GACXF,GAAU,GACVJ,EAAS,GACTU,cAAcH,EAAUI,SACxBJ,EAAUI,QAAUE,aAAY,WAC9Bb,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MAiCG,6BCrEK0B,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCMSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9072dee6.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react';\r\n\r\nconst Stopwatch = () => {\r\n  const [timer, setTimer] = useState(0)\r\n  const [isActive, setIsActive] = useState(false)\r\n  const [isWait, setIsWait] = useState(false)\r\n  const [isReset, setIsReset] = useState(false)\r\n  const increment = useRef(null)\r\n\r\n  const handleStart = () => {\r\n    setIsActive(true)\r\n    setIsWait(true)\r\n    setIsReset(true)\r\n    setTimer(0)\r\n    increment.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1)\r\n    }, 1000)\r\n  }\r\n\r\n  const handleWait = () => {\r\n    clearInterval(increment.current)\r\n    setIsWait(false)\r\n    setIsReset(false)\r\n  }\r\n\r\n  const handleStop = () => {\r\n    clearInterval(increment.current)\r\n    setIsWait(false)\r\n    setTimer(0)\r\n  }\r\n\r\n  const handleResume = () => {\r\n    setIsWait(true)\r\n    setIsReset(true)\r\n    increment.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1)\r\n    }, 1000)\r\n  }\r\n\r\n  const handleReset = () => {\r\n    clearInterval(increment.current)\r\n    setIsReset(false)\r\n    setIsWait(true)\r\n    setTimer(0)\r\n    clearInterval(increment.current)\r\n    increment.current = setInterval(() => {\r\n      setTimer((timer) => timer + 1)\r\n    }, 1000)\r\n  }\r\n\r\n  const formatTime = () => {\r\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\r\n    const minutes = `${Math.floor(timer / 60)}`\r\n    const getMinutes = `0${minutes % 60}`.slice(-2)\r\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2)\r\n\r\n    return `${getHours} : ${getMinutes} : ${getSeconds}`\r\n  }\r\n\r\n  return (\r\n    <div className='stopwatch container text-center mt-4'>\r\n      <h3>Stopwatch</h3>\r\n      <div className='stopwatch-card'>\r\n        <p>{formatTime()}</p>\r\n        <div className='buttons'>\r\n          {\r\n            !isActive && !isWait ?\r\n              <button className='btn btn-success'\r\n                      onClick={handleStart}>Start</button>\r\n              : ((isWait ? <button className=\"btn btn-danger\"\r\n                                   onClick={handleStop}>Stop</button>\r\n                : <button className='btn btn-success'\r\n                          onClick={handleResume}>Start</button>)\r\n                  || (isReset && !isWait ? <button className='btn btn-success'\r\n                                                   onClick={handleResume}>Start</button>\r\n                    : <button className=\"btn btn-danger\"\r\n                              onClick={handleStop}>Stop</button>))\r\n          }\r\n          <button className=\"btn btn-warning ml-2\"\r\n                  onDoubleClick={handleWait}>Wait</button>\r\n          <button className=\"btn btn-primary ml-2\"\r\n                  onClick={handleReset}>Reset</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stopwatch;","import React from 'react'\nimport Stopwatch from \"./components/Stopwatch\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stopwatch />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}